{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","style","width","src","id","alt","name","email","CardList","robots","map","user","i","key","SearchBox","searchChange","paddingBottom","type","placeholder","onChange","Scroll","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCLSC,EAXF,SAACC,GACV,OACI,yBAAKC,UAAU,kDAAkDC,MAAO,CAACC,MAAO,UAC9E,yBAAKC,IAAG,+BAA0BJ,EAAMK,GAAhC,iBAAmDC,IAAI,WAC/D,yBAAKL,UAAU,MACX,4BAAKD,EAAMO,MACX,4BAAKP,EAAMQ,UCMVC,EAXE,SAACT,GACd,OACA,6BAEIA,EAAMU,OAAOC,KAAI,SAACC,EAAKC,GACnB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIL,EAAMU,OAAOG,GAAGR,GAAIE,KAAMP,EAAMU,OAAOG,GAAGN,KAAMC,MAAOR,EAAMU,OAAOG,GAAGL,aCK7FO,EAXE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACf,OACI,yBAAKd,MAAO,CAACe,cAAc,QACvB,2BAAOhB,UAAU,mCACjBiB,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCAPK,EAPA,SAACrB,GACZ,OACI,yBAAKE,MAAO,CAACoB,UAAY,SAAUC,OAAQ,kBAAmBC,OAAQ,SACjExB,EAAMyB,WCoCJC,E,kDAlCX,aAAc,IAAD,8BACT,gBAWJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAX1C,EAAKC,MAAM,CACPvB,OAAO,GACPoB,YAAY,IAJP,E,gEAOO,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACnB,OAAO4B,S,+BAK9B,IAAD,OACEC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAC,GAC5C,OAAOA,EAAMnC,KAAKoC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAEpE,OAA+B,IAA3BH,KAAKP,MAAMvB,OAAOmC,OACX,0CAGH,yBAAK5C,UAAU,MACf,4CACA,kBAAC,EAAD,CAAWe,aAAcwB,KAAKb,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUjB,OAAU6B,U,GA5BlBO,IAAMC,WCExBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2229e765.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nconst Card = (props) =>{\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma3 grow b2 shadow-5' style={{width: '20rem'}}>\r\n          <img src={`https://robohash.org/${props.id}?size=200x200`} alt='robots'></img>\r\n          <div className='tc'>\r\n              <h2>{props.name}</h2>\r\n              <h3>{props.email}</h3>\r\n          </div>  \r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) =>{\r\n    return (\r\n    <div>\r\n        {\r\n        props.robots.map((user,i)=>{\r\n            return <Card key={i} id={props.robots[i].id} name={props.robots[i].name} email={props.robots[i].email}/>\r\n        })\r\n        }    \r\n    </div>\r\n    );\r\n};\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchChange}) =>{\r\n    return (\r\n        <div style={{paddingBottom:'8px'}}>\r\n            <input className=\"pa3 ba bg-lightest-blue b--green\" \r\n            type=\"search\" \r\n            placeholder=\"Search robots\"\r\n            onChange={searchChange}\r\n            ></input>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY : 'scroll', border: '4px solid black', height: '78vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchfield:'',\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>this.setState({robots:users}))\r\n    }\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield : event.target.value })\r\n    }\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n            })\r\n        if (this.state.robots.length===0){\r\n            return <h1>Loading...</h1>\r\n        }else{    \r\n            return(\r\n                <div className='tc'>\r\n                <h1>Robo Friends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <CardList robots = {filteredRobots}/>\r\n                </Scroll>\r\n                </div>\r\n            )\r\n        };\r\n    }\r\n};\r\nexport default App ;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport App from './containers/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}